# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:27:35+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class AccessTokenToPut(BaseModel):
    CardId: Optional[int] = Field(None, description='The ID of the Card')
    UserId: Optional[int] = Field(
        None,
        description='The ID of the User. The credentials provided must have permission to edit the user.\r\n            If no ID is provided, the user in the credentials is taken.',
    )


class ActionType(Enum):
    OnOffAction = 'OnOffAction'
    AnalogAction = 'AnalogAction'


class ActionInformation(BaseModel):
    ActionType_1: Optional[ActionType] = Field(
        None, alias='ActionType', description='The Type of this action.'
    )
    MaxValue: Optional[float] = Field(
        None, description='The maximum value of this action (e.g. for an AnalogAction)'
    )
    MinValue: Optional[float] = Field(
        None, description='The minimum value of this action (e.g. for an AnalogAction)'
    )
    Name: Optional[str] = Field(None, description='The Name of this action')
    ObisCode: Optional[str] = Field(
        None, description='The Obis Code of this action. This is used as ID.'
    )


class ActionToPostItem(BaseModel):
    ObisCode: Optional[str] = Field(None, description='The ObisCode (ID) of the Action')
    Value: Optional[float] = Field(None, description='The Value to Post')


class AdditionalDeviceInformation(BaseModel):
    AdditionalMeterSerialNumber: Optional[str] = Field(
        None,
        description='An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to.',
    )
    FirmwareVersion: Optional[int] = Field(
        None, description='The Firmware Version of a Meter'
    )
    HardwareVersion: Optional[int] = Field(
        None, description='The Hardware Version of a Meter.'
    )
    ID: Optional[str] = Field(None, description='The ID of the device')
    NetworkConnection: Optional[str] = Field(
        None,
        description='The mode how the device is connected to the network. Valid values are:\r\n            wifi, gprs, ltecatm1, ltenbiot, meshmobile, meshwifi',
    )
    NetworkConnectionRSSI: Optional[int] = Field(
        None, description='The connection RSSI value (0 is bad, 100 is best)'
    )


class ExportInterval(Enum):
    NoExport = 'NoExport'
    Hourly = 'Hourly'
    Daily = 'Daily'
    Weekly = 'Weekly'
    Monthly = 'Monthly'
    QuaterYearly = 'QuaterYearly'
    HalfYearly = 'HalfYearly'
    Yearly = 'Yearly'


class AutoExportSettings(BaseModel):
    ExportFormat: Optional[str] = Field(None, description='The export format')
    ExportInterval_1: Optional[ExportInterval] = Field(
        None,
        alias='ExportInterval',
        description='The export interval of the auto export',
    )
    MeterPointId: Optional[str] = Field(
        None, description='The meter point id set by the user'
    )
    UploadType: Optional[str] = Field(None, description='The upload type')


class CustomDeviceValues(BaseModel):
    Name: Optional[str] = Field(None, description='The Name of the Value.')
    Value: Optional[float] = Field(None, description='The Value')


class ChargingStationState(Enum):
    Booting = 'Booting'
    ReadyNoCarConnected = 'ReadyNoCarConnected'
    ReadyCarConnected = 'ReadyCarConnected'
    StartedWaitForCar = 'StartedWaitForCar'
    Charging = 'Charging'
    Installation = 'Installation'
    Authorize = 'Authorize'
    Offline = 'Offline'


class DeviceEnergyType(Enum):
    MeterTypeUnknown = 'MeterTypeUnknown'
    MeterTypeElectricity = 'MeterTypeElectricity'
    MeterTypeWater = 'MeterTypeWater'
    MeterTypeGas = 'MeterTypeGas'
    MeterTypeHeat = 'MeterTypeHeat'
    MeterTypeHCA = 'MeterTypeHCA'
    MeterTypeAllMeters = 'MeterTypeAllMeters'
    MeterTypeTemperature = 'MeterTypeTemperature'
    MeterTypeMBusGateway = 'MeterTypeMBusGateway'
    MeterTypeRS485Gateway = 'MeterTypeRS485Gateway'
    MeterTypeCustomDevice = 'MeterTypeCustomDevice'
    MeterTypeCompressedAir = 'MeterTypeCompressedAir'
    MeterTypeSolarLog = 'MeterTypeSolarLog'
    MeterTypeVirtualMeter = 'MeterTypeVirtualMeter'
    MeterTypeWMBusGateway = 'MeterTypeWMBusGateway'


class FamilyType(Enum):
    MeterFamilyTypeUnknown = 'MeterFamilyTypeUnknown'
    MeterFamilyTypeSmartMeConnectV1 = 'MeterFamilyTypeSmartMeConnectV1'
    MeterFamiliyTypeSmartMeMeter = 'MeterFamiliyTypeSmartMeMeter'
    MeterFamiliyTypeSmartMeMeterWithSwitch = 'MeterFamiliyTypeSmartMeMeterWithSwitch'
    MeterFamilyTypeMBusGatewayV1 = 'MeterFamilyTypeMBusGatewayV1'
    MeterFamilyTypeRS485GatewayV1 = 'MeterFamilyTypeRS485GatewayV1'
    MeterFamilyTypeKamstrupModule = 'MeterFamilyTypeKamstrupModule'
    MeterFamilyTypeSmartMe3PhaseMeter80A = 'MeterFamilyTypeSmartMe3PhaseMeter80A'
    MeterFamilyTypeSmartMe3PhaseMeter32A = 'MeterFamilyTypeSmartMe3PhaseMeter32A'
    MeterFamilyTypeSmartMe3PhaseTelstarTransformer = (
        'MeterFamilyTypeSmartMe3PhaseTelstarTransformer'
    )
    MeterFamilyTypeLandisGyrModule = 'MeterFamilyTypeLandisGyrModule'
    MeterFamilyTypeFnnOpticalModule = 'MeterFamilyTypeFnnOpticalModule'
    MeterFamilyTypeSmartMe3PhaseTelstar80AWiFi = (
        'MeterFamilyTypeSmartMe3PhaseTelstar80AWiFi'
    )
    MeterFamilyTypeSmartMe3PhaseTelstar80AMobile = (
        'MeterFamilyTypeSmartMe3PhaseTelstar80AMobile'
    )
    MeterFamilyTypeSmartMe1PhaseMeter80AV2WiFi = (
        'MeterFamilyTypeSmartMe1PhaseMeter80AV2WiFi'
    )
    MeterFamilyTypeSmartMe1PhaseMeter32AV2WiFi = (
        'MeterFamilyTypeSmartMe1PhaseMeter32AV2WiFi'
    )
    MeterFamilyTypeSmartMe1PhaseMeter80AGprs = (
        'MeterFamilyTypeSmartMe1PhaseMeter80AGprs'
    )
    MeterFamilyTypeSmartMe1PhaseMeter32AGprs = (
        'MeterFamilyTypeSmartMe1PhaseMeter32AGprs'
    )
    MeterFamilyTypeWMBusGatewayV1 = 'MeterFamilyTypeWMBusGatewayV1'
    MeterFamilyTypeSmartMe3PhaseTelstarTransformerMobile = (
        'MeterFamilyTypeSmartMe3PhaseTelstarTransformerMobile'
    )
    MeterFamilyTypeMithralHallV1 = 'MeterFamilyTypeMithralHallV1'
    MeterFamilyTypeRestApiMeter = 'MeterFamilyTypeRestApiMeter'
    MeterFamilyTypeVirtualBillingMeter = 'MeterFamilyTypeVirtualBillingMeter'


class MeterSubType(Enum):
    MeterSubTypeUnknown = 'MeterSubTypeUnknown'
    MeterSubTypeCold = 'MeterSubTypeCold'
    MeterSubTypeHeat = 'MeterSubTypeHeat'
    MeterSubTypeChargingStation = 'MeterSubTypeChargingStation'
    MeterSubTypeElectricity = 'MeterSubTypeElectricity'
    MeterSubTypeWater = 'MeterSubTypeWater'
    MeterSubTypeGas = 'MeterSubTypeGas'
    MeterSubTypeElectricityHeat = 'MeterSubTypeElectricityHeat'
    MeterSubTypeTemperature = 'MeterSubTypeTemperature'
    MeterSubTypeVirtualBattery = 'MeterSubTypeVirtualBattery'


class Device(BaseModel):
    ActivePower: Optional[float] = Field(
        None, description='The Actvie Power or current flow rate'
    )
    ActivePowerL1: Optional[float] = Field(
        None, description='The Actvie Power Phase L1'
    )
    ActivePowerL2: Optional[float] = Field(
        None, description='The Actvie Power Phase L2'
    )
    ActivePowerL3: Optional[float] = Field(
        None, description='The Actvie Power Phase L3'
    )
    ActivePowerUnit: Optional[str] = Field(
        None, description='The Unit of the Active Power Value'
    )
    ActiveTariff: Optional[int] = Field(
        None, description='The Number of the Active Tariff'
    )
    AdditionalMeterSerialNumber: Optional[str] = Field(
        None,
        description='An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to.',
    )
    AnalogOutput1: Optional[int] = Field(
        None, description='The analog output number 1 (PWM signal) (0 - 32183)'
    )
    AnalogOutput2: Optional[int] = Field(
        None, description='The analog output number 2 (PWM signal) (0 - 32183)'
    )
    ChargingStationState_1: Optional[ChargingStationState] = Field(
        None,
        alias='ChargingStationState',
        description='The state of a pico charging station. (Only available for pico charging stations)',
    )
    CounterReading: Optional[float] = Field(
        None, description='The Meter Counter Reading (Total Energy used)'
    )
    CounterReadingExport: Optional[float] = Field(
        None, description='The Meter Counter Reading only export'
    )
    CounterReadingImport: Optional[float] = Field(
        None, description='The Meter Counter Reading only import'
    )
    CounterReadingT1: Optional[float] = Field(
        None, description='The Meter Counter Reading Tariff 1'
    )
    CounterReadingT2: Optional[float] = Field(
        None, description='The Meter Counter Reading Tariff 2'
    )
    CounterReadingT3: Optional[float] = Field(
        None, description='The Meter Counter Reading Tariff 3'
    )
    CounterReadingT4: Optional[float] = Field(
        None, description='The Meter Counter Reading Tariff 4'
    )
    CounterReadingUnit: Optional[str] = Field(
        None, description='The Unit of the Counter Reading'
    )
    Current: Optional[float] = Field(None, description='The Current (in A)')
    CurrentL1: Optional[float] = Field(None, description='The Current Phase L1 (in A)')
    CurrentL2: Optional[float] = Field(None, description='The Current Phase L2 (in A)')
    CurrentL3: Optional[float] = Field(None, description='The Current Phase L3 (in A)')
    DeviceEnergyType_1: Optional[DeviceEnergyType] = Field(
        None, alias='DeviceEnergyType', description='The Energy Type of this device'
    )
    DigitalInput1: Optional[bool] = Field(
        None, description='The digital input number 1'
    )
    DigitalInput2: Optional[bool] = Field(
        None, description='The digital input number 2'
    )
    DigitalOutput1: Optional[bool] = Field(
        None, description='The digital output number 1'
    )
    DigitalOutput2: Optional[bool] = Field(
        None, description='The digital output number 2'
    )
    FamilyType_1: Optional[FamilyType] = Field(
        None, alias='FamilyType', description='The Family Type of the device.'
    )
    FlowRate: Optional[float] = Field(
        None, description='The current flow rate (e.g. m3/h)'
    )
    Id: Optional[str] = Field(None, description='The ID of the device')
    MeterSubType_1: Optional[MeterSubType] = Field(
        None,
        alias='MeterSubType',
        description='The sub meter type (e.g. warmwater or coldwater)',
    )
    Name: Optional[str] = Field(None, description='The Name of the Device')
    PowerFactor: Optional[float] = Field(
        None, description='The Power Factor (cos phi). Range: 0 - 1'
    )
    PowerFactorL1: Optional[float] = Field(
        None, description='The Power Factor (cos phi) Phase L1. Range: 0 - 1'
    )
    PowerFactorL2: Optional[float] = Field(
        None, description='The Power Factor (cos phi) Phase L2. Range: 0 - 1'
    )
    PowerFactorL3: Optional[float] = Field(
        None, description='The Power Factor (cos phi) Phase L3. Range: 0 - 1'
    )
    Serial: Optional[int] = Field(None, description='The Serial number')
    SwitchOn: Optional[bool] = Field(
        None, description='Flag if the Switch is on on this device.'
    )
    SwitchPhaseL1On: Optional[bool] = Field(
        None, description='Flag if the Phase L1 is on on this device.'
    )
    SwitchPhaseL2On: Optional[bool] = Field(
        None, description='Flag if the Phase L2 is on on this device.'
    )
    SwitchPhaseL3On: Optional[bool] = Field(
        None, description='Flag if the Phase L3 is on on this device.'
    )
    Temperature: Optional[float] = Field(
        None, description='The Temperature (in degree celsius)'
    )
    ValueDate: Optional[datetime] = Field(
        None, description='Time of last successful connection the the smart-me Cloud.'
    )
    Voltage: Optional[float] = Field(None, description='The Voltage (in V)')
    VoltageL1: Optional[float] = Field(None, description='The Voltage Phase L1 (in V)')
    VoltageL2: Optional[float] = Field(None, description='The Voltage Phase L2 (in V)')
    VoltageL3: Optional[float] = Field(None, description='The Voltage Phase L3 (in V)')


class DeviceInPast(BaseModel):
    CounterReading: Optional[float] = Field(
        None, description='The Meter Counter Reading (Total Energy used)'
    )
    CounterReadingExport: Optional[float] = Field(
        None, description='The Meter Counter Reading Export'
    )
    CounterReadingExportT1: Optional[float] = Field(
        None, description='The Meter Counter Reading Export Tariff 1'
    )
    CounterReadingExportT2: Optional[float] = Field(
        None, description='The Meter Counter Reading Export Tariff 2'
    )
    CounterReadingExportT3: Optional[float] = Field(
        None, description='The Meter Counter Reading Export Tariff 3'
    )
    CounterReadingExportT4: Optional[float] = Field(
        None, description='The Meter Counter Reading Export Tariff 4'
    )
    CounterReadingImport: Optional[float] = Field(
        None, description='The Meter Counter Reading Import'
    )
    CounterReadingImportT1: Optional[float] = Field(
        None, description='The Meter Counter Reading Import Tariff 1'
    )
    CounterReadingImportT2: Optional[float] = Field(
        None, description='The Meter Counter Reading Import Tariff 2'
    )
    CounterReadingImportT3: Optional[float] = Field(
        None, description='The Meter Counter Reading Import Tariff 3'
    )
    CounterReadingImportT4: Optional[float] = Field(
        None, description='The Meter Counter Reading Import Tariff 4'
    )
    CounterReadingT1: Optional[float] = Field(
        None, description='The Meter Counter Reading Tariff 1'
    )
    CounterReadingT2: Optional[float] = Field(
        None, description='The Meter Counter Reading Tariff 2'
    )
    CounterReadingT3: Optional[float] = Field(
        None, description='The Meter Counter Reading Tariff 3'
    )
    CounterReadingT4: Optional[float] = Field(
        None, description='The Meter Counter Reading Tariff 4'
    )
    CounterReadingUnit: Optional[str] = Field(
        None, description='The Unit of the Counter Reading'
    )
    Date: Optional[datetime] = Field(None, description='The Date of the Values')
    Id: Optional[str] = Field(None, description='The ID of the device')
    Serial: Optional[int] = Field(None, description='The Serial number')


class DeviceToPost(BaseModel):
    ActivePower: Optional[float] = Field(
        None, description='The Active Power or current flow rate. In kW or m3/h'
    )
    CounterReading: Optional[float] = Field(
        None, description='The Meter Counter Reading (Total Energy used) in kWh or m3.'
    )
    CounterReadingExport: Optional[float] = Field(
        None, description='The Meter Counter Reading only export'
    )
    CounterReadingExportT1: Optional[float] = Field(
        None, description='The Meter Counter Reading only export (Tariff 1)'
    )
    CounterReadingExportT2: Optional[float] = Field(
        None, description='The Meter Counter Reading only export (Tariff 2)'
    )
    CounterReadingT1: Optional[float] = Field(
        None, description='The Meter Counter Reading Tariff 1 in kWh or m3.'
    )
    CounterReadingT2: Optional[float] = Field(
        None, description='The Meter Counter Reading Tariff 2 in kWh or m3.'
    )
    Current: Optional[float] = Field(None, description='The Current (in A)')
    CurrentL1: Optional[float] = Field(None, description='The Current Phase L1 (in A)')
    CurrentL2: Optional[float] = Field(None, description='The Current Phase L2 (in A)')
    CurrentL3: Optional[float] = Field(None, description='The Current Phase L3 (in A)')
    DeviceEnergyType_1: Optional[DeviceEnergyType] = Field(
        None, alias='DeviceEnergyType', description='The Energy Type of this device'
    )
    DigitalInput1: Optional[bool] = Field(
        None, description='The digital input number 1'
    )
    Id: Optional[str] = Field(None, description='The ID of the device')
    MeterSubType_1: Optional[MeterSubType] = Field(
        None, alias='MeterSubType', description='The Sub Type of this Meter.'
    )
    Name: Optional[str] = Field(None, description='The Name of the Device')
    PowerFactor: Optional[float] = Field(
        None, description='The Power Factor (cos phi). Range: 0 - 1'
    )
    PowerFactorL1: Optional[float] = Field(
        None, description='The Power Factor (cos phi) Phase L1. Range: 0 - 1'
    )
    PowerFactorL2: Optional[float] = Field(
        None, description='The Power Factor (cos phi) Phase L2. Range: 0 - 1'
    )
    PowerFactorL3: Optional[float] = Field(
        None, description='The Power Factor (cos phi) Phase L3. Range: 0 - 1'
    )
    Serial: Optional[int] = Field(None, description='The Serial number')
    Temperature: Optional[float] = Field(
        None, description='The Temperature (in degree celsius)'
    )
    ValueDate: Optional[datetime] = Field(
        None,
        description='The Date of the Value (in UTC). If this is null the Server Time is used.',
    )
    Voltage: Optional[float] = Field(None, description='The Voltage (in V)')
    VoltageL1: Optional[float] = Field(None, description='The Voltage Phase L1 (in V)')
    VoltageL2: Optional[float] = Field(None, description='The Voltage Phase L2 (in V)')
    VoltageL3: Optional[float] = Field(None, description='The Voltage Phase L3 (in V)')


class FolderData(BaseModel):
    ElectricityCounterValue: Optional[float] = Field(
        None, description='The Counter values for electricity (kWh)'
    )
    ElectricityPower: Optional[float] = Field(
        None, description='The Power for electricity (kW)'
    )
    GasCounterValue: Optional[float] = Field(
        None, description='The Counter values for Gas (m3)'
    )
    GasFlowRate: Optional[float] = Field(
        None, description='The Flow Rate for Gas (m3/h)'
    )
    HeatCounterValue: Optional[float] = Field(
        None, description='The Counter values for Heat (kWh)'
    )
    HeatPower: Optional[float] = Field(None, description='The Power for Heat (kW)')
    WaterCounterValue: Optional[float] = Field(
        None, description='The Counter values for Water (m3)'
    )
    WaterFlowRate: Optional[float] = Field(
        None, description='The Flow Rate for Water (m3/h)'
    )


class FolderType(Enum):
    Folder = 'Folder'
    Location = 'Location'
    Factory = 'Factory'
    House = 'House'
    Office = 'Office'
    Machine = 'Machine'
    VirtualMeter = 'VirtualMeter'
    ElecticityFolder = 'ElecticityFolder'
    WaterFolder = 'WaterFolder'
    HeatFolder = 'HeatFolder'
    GasFolder = 'GasFolder'
    TemperatureFolder = 'TemperatureFolder'
    Sun = 'Sun'
    Light = 'Light'
    Ice = 'Ice'
    Sofa = 'Sofa'
    Food = 'Food'
    Coffee = 'Coffee'
    Car = 'Car'
    ChargingStation = 'ChargingStation'
    Meter = 'Meter'
    User = 'User'
    Trash = 'Trash'
    GridPhotovoltaicPowerSystem = 'GridPhotovoltaicPowerSystem'


class FolderMenuItem(BaseModel):
    AutoExportSettings_1: Optional[AutoExportSettings] = Field(
        None, alias='AutoExportSettings'
    )
    Children: Optional[List[FolderMenuItem]] = Field(
        None, description='Children folder menu items (sub folder menu items)'
    )
    Description: Optional[str] = Field(
        None, description='The Description of the folder'
    )
    FolderType_1: Optional[FolderType] = Field(
        None, alias='FolderType', description='The folder type of the item'
    )
    Icon: Optional[str] = Field(None, description='The path to the Icon of this folder')
    Id: Optional[str] = Field(None, description='The id of the folder menu item')
    MeterSerialNumber: Optional[str] = Field(
        None,
        description='The serial number if the folder menu item is a meter. \r\n            Serial number is handled as a string, as javascript on client side cannot handle long integers properly.',
    )
    Name: Optional[str] = Field(None, description='The Name of the item')
    UserId: Optional[str] = Field(
        None, description='The ID of the user of this folder (only for foldertype user)'
    )


class FolderSettings(BaseModel):
    Description: Optional[str] = Field(
        None, description='The Description of the folder or meter'
    )
    Enable: Optional[bool] = Field(
        None, description='Flag if the meter is enabled (folder not supported yet)'
    )
    FolderType_1: Optional[FolderType] = Field(
        None, alias='FolderType', description='The Type of the folder'
    )
    Name: Optional[str] = Field(None, description='The Name of the folder or meter')
    ParentFolderId: Optional[str] = Field(
        None, description='The parent folder ID of this item'
    )
    SerialNumber: Optional[int] = Field(
        None, description='The serial number (meter only)'
    )
    UseableForVirtualBillingMeters: Optional[bool] = Field(
        None,
        description='Flag if the meter is usable for virtual billing meters (e.g. washroom)',
    )
    ValueCorrection: Optional[float] = Field(
        None, description='The value correction on this meter'
    )
    ValueCorrectionParentFolder: Optional[float] = Field(
        None,
        description='The value correction on all parent folders. but not on the meter itself',
    )
    VisualizationName: Optional[str] = Field(
        None, description='The name of the visualization of the folder'
    )


class Type(Enum):
    TariffInput = 'TariffInput'
    DigitalInput = 'DigitalInput'


class InputConfigurationContainer(BaseModel):
    Name: Optional[str] = Field(None, description='The Name of the Input')
    Number: Optional[int] = Field(
        None, description='The number of the Input. (1 for Input 1)'
    )
    OffText: Optional[str] = Field(
        None, description='The visualization text for an OFF action'
    )
    OnText: Optional[str] = Field(
        None, description='The visualization text for an ON action'
    )
    Type_1: Optional[Type] = Field(
        None, alias='Type', description='The Type of the output'
    )


class InputInformation(BaseModel):
    Name: Optional[str] = Field(None, description='The Name of the Input')
    Number: Optional[int] = Field(
        None,
        description='The Number of this Input. Use this as ID to switch it on or off.',
    )


class MBusData(BaseModel):
    Date: Optional[datetime] = Field(
        None,
        description='The Date of the M-BUS Telegram Readout (in UTC). If this is null the Server Time is used.',
    )
    Telegram: Optional[str] = Field(
        None,
        description='The M-BUS Telegram as Hex string. \r\n            Example: 68 1F 1F 68 08 02 72 78 56 34 12 24 40 01 07 55 00 00 00 03 13 15 31 00 DA 02 3B 13 01 8B 60 04 37 18 02 18 16',
    )


class MeterFolderInformationToPost(BaseModel):
    Id: Optional[str] = Field(None, description='The ID of the device or folder')
    Name: Optional[str] = Field(None, description='Name of the Meter or Folder')


class Object(BaseModel):
    pass


class DigitalOutputNoConnectionAction(Enum):
    Nothing = 'Nothing'
    TurnOff = 'TurnOff'
    TurnOn = 'TurnOn'
    SetPwmValue = 'SetPwmValue'


class S0PulseValue(Enum):
    PulseValue1000Kwh = 'PulseValue1000Kwh'
    PulseValue10000Kwh = 'PulseValue10000Kwh'


class Type1(Enum):
    ImpulseOutputActiveEnergy = 'ImpulseOutputActiveEnergy'
    ImpulseOutputActiveEnergyImport = 'ImpulseOutputActiveEnergyImport'
    ImpulseOutputActiveEnergyExport = 'ImpulseOutputActiveEnergyExport'
    ImpulseOutputReactiveEnergy = 'ImpulseOutputReactiveEnergy'
    DigitalOutput = 'DigitalOutput'
    AnalogPwmSignalOutput = 'AnalogPwmSignalOutput'
    Disabled = 'Disabled'


class OutputConfigurationContainer(BaseModel):
    DigitalOutputNoConnectionAction_1: Optional[DigitalOutputNoConnectionAction] = (
        Field(
            None,
            alias='DigitalOutputNoConnectionAction',
            description='The Action when the device has lost the connection',
        )
    )
    Name: Optional[str] = Field(None, description='The Name of the Output')
    Number: Optional[int] = Field(
        None, description='The number of the Output. (1 for Output 1, 2 for Output 2)'
    )
    S0PulseValue_1: Optional[S0PulseValue] = Field(
        None, alias='S0PulseValue', description='The S0 Pulse Value'
    )
    Type: Optional[Type1] = Field(None, description='The Type of the output')


class OutputInformation(BaseModel):
    ActionType_1: Optional[ActionType] = Field(
        None, alias='ActionType', description='The type of the Output'
    )
    Name: Optional[str] = Field(None, description='The Name of the Output')
    Number: Optional[int] = Field(
        None,
        description='The Number of this Output. Use this as ID to switch it on or off.',
    )
    ObisCode: Optional[str] = Field(None, description='The Obis Code for this Output')


class ConnectionMode(Enum):
    NetworkToCloudConnectionMode_NoConnection = (
        'NetworkToCloudConnectionMode_NoConnection'
    )
    NetworkToCloudConnectionMode_DirectWiFiConnection = (
        'NetworkToCloudConnectionMode_DirectWiFiConnection'
    )
    NetworkToCloudConnectionMode_GPRSConnection = (
        'NetworkToCloudConnectionMode_GPRSConnection'
    )
    NetworkToCloudConnectionMode_NBIotConnection = (
        'NetworkToCloudConnectionMode_NBIotConnection'
    )
    NetworkToCloudConnectionMode_LteCatM1Connection = (
        'NetworkToCloudConnectionMode_LteCatM1Connection'
    )
    NetworkToCloudConnectionMode_MeshWiFiConnection = (
        'NetworkToCloudConnectionMode_MeshWiFiConnection'
    )
    NetworkToCloudConnectionMode_MeshMobileConnection = (
        'NetworkToCloudConnectionMode_MeshMobileConnection'
    )


class LastWarningOrError(Enum):
    MeterDataloggerEvent = 'MeterDataloggerEvent'
    MeterRestart = 'MeterRestart'
    PowerDown = 'PowerDown'
    MissingPhaseL1 = 'MissingPhaseL1'
    MissingPhaseL2 = 'MissingPhaseL2'
    MissingPhaseL3 = 'MissingPhaseL3'
    TamperDetectionCover = 'TamperDetectionCover'
    MagneticFieldDetection = 'MagneticFieldDetection'
    ClockAdjusted = 'ClockAdjusted'
    Overvoltage = 'Overvoltage'
    Undervoltage = 'Undervoltage'
    OvervoltageL1 = 'OvervoltageL1'
    OvervoltageL2 = 'OvervoltageL2'
    OvervoltageL3 = 'OvervoltageL3'
    ChargingTransaction = 'ChargingTransaction'
    PicoErrorControllerPanic = 'PicoErrorControllerPanic'
    PicoErrorMidServicePanic = 'PicoErrorMidServicePanic'
    PicoWarningRcdTriggered = 'PicoWarningRcdTriggered'
    PicoWarningCableLockError = 'PicoWarningCableLockError'
    PicoWarningDiodeFailure = 'PicoWarningDiodeFailure'
    PicoWarningOverload = 'PicoWarningOverload'
    PicoWarningHighTemperature = 'PicoWarningHighTemperature'


class LoadSheddingState(Enum):
    MaxCurrent = 'MaxCurrent'
    HalfCurrent = 'HalfCurrent'
    MinCurrent = 'MinCurrent'
    NoCurrent = 'NoCurrent'


class State(Enum):
    Booting = 'Booting'
    ReadyNoCarConnected = 'ReadyNoCarConnected'
    ReadyCarConnected = 'ReadyCarConnected'
    StartedWaitForCar = 'StartedWaitForCar'
    Charging = 'Charging'
    Installation = 'Installation'
    Authorize = 'Authorize'
    Offline = 'Offline'


class PicoChargingData(BaseModel):
    ActiveChargingEnergy: Optional[float] = Field(
        None, description='The energy used by this active charging (in kWh)'
    )
    ActiveChargingPower: Optional[float] = Field(
        None, description='The power of the active charging (in kW)'
    )
    ConnectionMode_1: Optional[ConnectionMode] = Field(
        None,
        alias='ConnectionMode',
        description='The mode how this station is connected to the cloud',
    )
    Duration: Optional[int] = Field(
        None, description='The duration of this charging in seconds'
    )
    LastWarningOrError_1: Optional[LastWarningOrError] = Field(
        None,
        alias='LastWarningOrError',
        description='The last warning or error of the station. This message is only shown if the warning or error happend in the last 5 minutes.',
    )
    LastWarningOrErrorMessage: Optional[str] = Field(
        None, description='The message of the last warning or error of the station.'
    )
    LastWarningOrErrorTime: Optional[datetime] = Field(
        None, description='The time when the LastWarningOrError happend'
    )
    LoadSheddingState_1: Optional[LoadSheddingState] = Field(
        None,
        alias='LoadSheddingState',
        description='Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A',
    )
    LoadmanagementGroupName: Optional[str] = Field(
        None,
        description='The name of the loadmanagement group. Or string.empty if the station is not in a group',
    )
    MaxAllowedChargingCurrent: Optional[int] = Field(
        None, description='Max allowed charging current in A'
    )
    MaxDynamicCurrent: Optional[int] = Field(
        None,
        description='Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A',
    )
    MaxLoadmanagementGroupCurrent: Optional[int] = Field(
        None,
        description='Max. current of the loadmanagement group of this station (if there is any) in A',
    )
    MaxStationCurrent: Optional[int] = Field(
        None, description='Max. current of the station in A'
    )
    MinStationCurrent: Optional[int] = Field(
        None, description='Min. current of the station in A'
    )
    State_1: Optional[State] = Field(
        None, alias='State', description='The state of the charging station'
    )
    ValueDate: Optional[datetime] = Field(None, description='The date of this values')


class PicoChargingHistoryData(BaseModel):
    Duration: Optional[int] = Field(None, description='The duration in seconds')
    EnergyUsed: Optional[float] = Field(None, description='The energy used (in kWh)')
    StartTime: Optional[datetime] = Field(
        None, description='The starttime of the charging (in UTC)'
    )


class PicoLoadmanagementGroupDto(BaseModel):
    Id: Optional[str] = Field(None, description='The ID of the loadmanagement group')
    MaxCurrent: Optional[float] = Field(
        None, description='The max current of this loadmanagement group'
    )
    Name: Optional[str] = Field(None, description='The name of the station')
    NumberOfStations: Optional[int] = Field(
        None, description='The number of assigned stations'
    )


class AuthenticationType(Enum):
    None_ = 'None'
    Backend = 'Backend'


class PicoSettingsDto(BaseModel):
    AuthenticationType_1: Optional[AuthenticationType] = Field(
        None, alias='AuthenticationType', description='The authentication type'
    )
    CarIdDetection: Optional[bool] = Field(
        None, description='Flag if the car id detection is enabled'
    )
    DisplayBrightness: Optional[str] = Field(
        None,
        description='The Brightness of the LCD Matrix display. 0 = minimum, 255 = maximum',
    )
    DnsName: Optional[str] = Field(
        None, description="The DNS name of the pico's internal ip"
    )
    FixCableLockEnable: Optional[bool] = Field(
        None, description='Enable the fix lock of the charging cable'
    )
    IdleImageUrl: Optional[str] = Field(None, description='The url of the idle image')
    InternalIp: Optional[str] = Field(None, description='The internal IP address')
    LoadmanagementGroupId: Optional[str] = Field(
        None, description='The ID of the loadmanagement group'
    )
    MaxCurrent: Optional[int] = Field(
        None, description='The max current of this station (in A)'
    )
    MinCurrent: Optional[int] = Field(
        None, description='The max current of this station (in A)'
    )
    ModbusTcp: Optional[bool] = Field(None, description='Flag if ModbusTcp is enabled')
    Name: Optional[str] = Field(None, description='The name of the station')
    SerialNumber: Optional[str] = Field(
        None, description='The Serial number of the station'
    )


class RegistrationType(Enum):
    Disabled = 'Disabled'
    SingleMeterRegistration = 'SingleMeterRegistration'
    UserRegistration = 'UserRegistration'


class RegisterRealtimeApiData(BaseModel):
    ApiUrl: Optional[str] = Field(
        None,
        description='The URL of your endpoint. To this endpoint all the values are send to.',
    )
    BasicAuthPassword: Optional[str] = Field(
        None,
        description='The Password (basic auth) of your endpoint. Leave empty of none.',
    )
    BasicAuthUsername: Optional[str] = Field(
        None,
        description='The Username (basic auth) of your endpoint. Leave empty of none.',
    )
    Id: Optional[str] = Field(None, description='The ID of the registration')
    MeterId: Optional[str] = Field(
        None,
        description='The ID of the Meter. Just used if the RegistrationType is "SingleMeterRegistration".',
    )
    RegistrationType_1: Optional[RegistrationType] = Field(
        None,
        alias='RegistrationType',
        description='The Type of this registration (per meter, per user, ...)',
    )
    SerialNumber: Optional[str] = Field(
        None,
        description='The serial number of the Meter. Just used if the RegistrationType is "SingleMeterRegistration" and the MeterId is null. \r\n            Example: 1 SME 01 63000000 or 6300000',
    )


class DnsUpdateState(Enum):
    NoUpdate = 'NoUpdate'
    DnsUpdatePublicIp = 'DnsUpdatePublicIp'
    DnsUpdateInternalIp = 'DnsUpdateInternalIp'


class UploadInterval(Enum):
    UploadInterval_1s = 'UploadInterval_1s'
    UploadInterval_5s = 'UploadInterval_5s'
    UploadInterval_10s = 'UploadInterval_10s'
    UploadInterval_30s = 'UploadInterval_30s'
    UploadInterval_60s = 'UploadInterval_60s'
    UploadInterval_5min = 'UploadInterval_5min'
    UploadInterval_15min = 'UploadInterval_15min'
    UploadInterval_30min = 'UploadInterval_30min'
    UploadInterval_60min = 'UploadInterval_60min'
    UploadInterval_6h = 'UploadInterval_6h'
    UploadInterval_12h = 'UploadInterval_12h'
    UploadInterval_24h = 'UploadInterval_24h'


class PermissionLevel(Enum):
    SelectedFolderAndSubfoldersMeters = 'SelectedFolderAndSubfoldersMeters'
    SelectedFolderOnly = 'SelectedFolderOnly'


class SubUserData(BaseModel):
    AccessEndDate: Optional[datetime] = Field(
        None, description='The end date. until this date the user has access'
    )
    AccessTimeStartDate: Optional[datetime] = Field(
        None, description='The start date. From this date the user has access'
    )
    Email: Optional[str] = Field(None, description='The Email adress')
    Id: Optional[str] = Field(None, description='The ID of the user')
    NewPassword: Optional[str] = Field(
        None, description='If set this is used a new password'
    )
    PermissionLevel_1: Optional[PermissionLevel] = Field(
        None, alias='PermissionLevel', description='The permission level of the user'
    )
    Username: Optional[str] = Field(None, description='The username')


class SwitchConfigurationContainer(BaseModel):
    CanSwitchOff: Optional[bool] = Field(
        None, description='Flag if the switch can be turned off or is always on.'
    )
    Number: Optional[int] = Field(
        None, description='The number of the phase. (e.g. 1 for Phase L1)'
    )


class User(BaseModel):
    ChildUsers: Optional[List[User]] = Field(
        None, description='The Users created by this users.'
    )
    Email: Optional[str] = Field(None, description='The EMail Address of the User')
    Id: Optional[int] = Field(None, description='The ID of the User')
    IdAsString: Optional[str] = Field(None, description='The ID of the user as string')
    IsAdmin: Optional[bool] = Field(
        None, description='Flag if this User is an Admin User'
    )
    Permissions: Optional[List[str]] = Field(None, description='Additional Permissions')
    Username: Optional[str] = Field(None, description='The Username of the User')


class VMeterToActivate(BaseModel):
    SerialNumber: Optional[str] = Field(
        None, description='The Serialnumber of the Meter to activate.'
    )


class VMeterToDeactivate(BaseModel):
    ID: Optional[str] = Field(
        None, description='The ID of the Virtual meter to deactivate'
    )


class ValueData(BaseModel):
    Obis: Optional[str] = Field(
        None,
        description='The Obis code of this value. \r\n            A description you can find here:\r\n            http://wiki.smart-me.com/index.php/Obis_codes',
    )
    Value: Optional[float] = Field(None, description='The Value')


class ValuesData(BaseModel):
    Date: Optional[datetime] = Field(None, description='The Date of the Value')
    DeviceId: Optional[str] = Field(None, description='The ID of the device')
    Values: Optional[List[ValueData]] = Field(None, description='All values')


class Type2(Enum):
    Battery = 'Battery'
    Solar = 'Solar'
    Normal = 'Normal'


class VirtualTariff(BaseModel):
    Factor: Optional[float] = Field(
        None,
        description='Says how many of the active power is used in this tariff. This is calculated from the last meter values.',
    )
    Id: Optional[str] = None
    Name: Optional[str] = None
    Type: Optional[Type2] = None
    Unit: Optional[str] = None
    Value: Optional[float] = Field(None, description='The Counter Value of this tariff')


class TariffType(Enum):
    Battery = 'Battery'
    Solar = 'Solar'
    Normal = 'Normal'


class VirtualTariffConsumptionData(BaseModel):
    Consumption: Optional[float] = Field(
        None, description='The consumption (e.g. kWh) of this tariff'
    )
    Currency: Optional[str] = Field(None, description='The currency of the price')
    Name: Optional[str] = Field(None, description='The Name of this virtual tariff')
    Price: Optional[float] = Field(
        None, description='The price of the energy in this timerange'
    )
    TariffType_1: Optional[TariffType] = Field(
        None,
        alias='TariffType',
        description='The type of the virtual tariff (e.g. solar)',
    )


class VirtualTariffsOfFolder(BaseModel):
    Date: Optional[datetime] = Field(
        None, description='The DateTime (UTC) of this virtual tarfifs'
    )
    FolderId: Optional[str] = None
    Name: Optional[str] = Field(None, description='The name of this folder')
    VirtualTariffs: Optional[List[VirtualTariff]] = None


class ApiActionsIdGetResponse(RootModel[List[ActionInformation]]):
    root: List[ActionInformation]


class ApiDevicesGetResponse(RootModel[List[Device]]):
    root: List[Device]


class MeterEnergyType(Enum):
    MeterTypeUnknown = 'MeterTypeUnknown'
    MeterTypeElectricity = 'MeterTypeElectricity'
    MeterTypeWater = 'MeterTypeWater'
    MeterTypeGas = 'MeterTypeGas'
    MeterTypeHeat = 'MeterTypeHeat'
    MeterTypeHCA = 'MeterTypeHCA'
    MeterTypeAllMeters = 'MeterTypeAllMeters'
    MeterTypeTemperature = 'MeterTypeTemperature'
    MeterTypeMBusGateway = 'MeterTypeMBusGateway'
    MeterTypeRS485Gateway = 'MeterTypeRS485Gateway'
    MeterTypeCustomDevice = 'MeterTypeCustomDevice'
    MeterTypeCompressedAir = 'MeterTypeCompressedAir'
    MeterTypeSolarLog = 'MeterTypeSolarLog'
    MeterTypeVirtualMeter = 'MeterTypeVirtualMeter'
    MeterTypeWMBusGateway = 'MeterTypeWMBusGateway'


class ApiDevicesByEnergyGetResponse(RootModel[List[Device]]):
    root: List[Device]


class ApiDevicesBySubTypeGetResponse(RootModel[List[Device]]):
    root: List[Device]


class ApiRegisterForRealtimeApiGetResponse(RootModel[List[RegisterRealtimeApiData]]):
    root: List[RegisterRealtimeApiData]


class ApiValuesInPastMultipleIdGetResponse(RootModel[List[ValuesData]]):
    root: List[ValuesData]


class ApiVirtualBillingMeterActiveGetResponse(RootModel[List[Device]]):
    root: List[Device]


class ApiVirtualBillingMetersGetResponse(RootModel[List[Device]]):
    root: List[Device]


class ApiVirtualTariffGetResponse(RootModel[List[VirtualTariffsOfFolder]]):
    root: List[VirtualTariffsOfFolder]


class ApiVirtualTariffConsumptionGetResponse(
    RootModel[List[VirtualTariffConsumptionData]]
):
    root: List[VirtualTariffConsumptionData]


class ApiVirtualTariffsForPropertyIdGetResponse(
    RootModel[List[VirtualTariffsOfFolder]]
):
    root: List[VirtualTariffsOfFolder]


class ApiPicoGetResponse(RootModel[List[Device]]):
    root: List[Device]


class ApiPicoHistoryIdGetResponse(RootModel[List[PicoChargingHistoryData]]):
    root: List[PicoChargingHistoryData]


class ApiPicoLoadmanagementgroupGetResponse(
    RootModel[List[PicoLoadmanagementGroupDto]]
):
    root: List[PicoLoadmanagementGroupDto]


class ActionToPost(BaseModel):
    Actions: Optional[List[ActionToPostItem]] = Field(
        None, description='List with all Actions for this device'
    )
    DeviceID: Optional[str] = Field(None, description='The ID of the Device')


class CustomDeviceToPost(BaseModel):
    Id: Optional[str] = Field(None, description='The ID of the device')
    Name: Optional[str] = Field(None, description='The Name of the Device')
    Serial: Optional[int] = Field(None, description='The Serial number')
    ValueDate: Optional[datetime] = Field(
        None,
        description='The Date of the Value (in UTC). If this is null the Server Time is used.',
    )
    Values: Optional[List[CustomDeviceValues]] = Field(
        None, description='The Values of the custom Device'
    )


class FolderMenuConfiguration(BaseModel):
    BrowserTimeZoneName: Optional[str] = Field(
        None, description='The time zone name taken from the browser'
    )
    BrowserUtcTime: Optional[str] = Field(
        None, description='The UTC time taken from the browser'
    )
    Items: Optional[List[FolderMenuItem]] = None


class MeterFolderInformation(BaseModel):
    CommunicationModuleFirmwareVersion: Optional[int] = Field(
        None, description='The Version of the Communication Module (if exists)'
    )
    CommunicationModuleHardwareVersion: Optional[int] = Field(
        None, description='The Version of the Communication Module (if exists)'
    )
    FirmwareVersion: Optional[int] = Field(
        None, description='The Firmware Version of a Meter'
    )
    HardwareVersion: Optional[int] = Field(
        None, description='The Hardware Version of a Meter.'
    )
    InputInformations: Optional[List[InputInformation]] = Field(
        None, description='Informations about the available Inputs'
    )
    IsFolder: Optional[bool] = Field(
        None, description="Flag if it's a Folder or a Meter"
    )
    Name: Optional[str] = Field(None, description='Name of the Meter or Folder')
    OutputInformations: Optional[List[OutputInformation]] = Field(
        None, description='Informations about the available Outputs'
    )


class SmartMeDeviceConfigurationContainer(BaseModel):
    DeviceEncryptionKey: Optional[str] = Field(
        None,
        description='The encryption key used to decrypt messages received from an external meter (used only for the smart-me modules)',
    )
    DevicePinCode: Optional[str] = Field(
        None,
        description='PIN code to enter on a external meter (e.g. for the FNN meters)',
    )
    DnsUpdateState_1: Optional[DnsUpdateState] = Field(
        None,
        alias='DnsUpdateState',
        description='Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS',
    )
    EnableModbusTcp: Optional[bool] = Field(
        None, description='Enables or disables Modbus TCP (if the meter supports it).'
    )
    Id: Optional[str] = Field(None, description='The ID of the device')
    InputConfiguration: Optional[List[InputConfigurationContainer]] = Field(
        None, description='The configuration for the intput outputs'
    )
    OutputConfiguration: Optional[List[OutputConfigurationContainer]] = Field(
        None, description='The configuration for the external outputs'
    )
    ShowReactiveEnergy: Optional[bool] = Field(
        None, description='Shows the reactive energy values (if the meter supports it).'
    )
    SwitchConfiguration: Optional[List[SwitchConfigurationContainer]] = Field(
        None, description='The configuration for the phase switches'
    )
    UploadInterval_1: Optional[UploadInterval] = Field(
        None,
        alias='UploadInterval',
        description='Number of seconds the device will upload the data. For smaller values maybe a professional license is needed.',
    )


class ApiCustomDeviceGetResponse(RootModel[List[CustomDeviceToPost]]):
    root: List[CustomDeviceToPost]


FolderMenuItem.model_rebuild()
User.model_rebuild()
